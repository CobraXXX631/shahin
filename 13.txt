//(Работает только на английском)
#include <iostream>
#include <string>
#include <cctype> 
int main() {
    setlocale(LC_ALL, "RU");
    std::string input;
    std::cout << "Введите строку: ";
    std::getline(std::cin, input);

    std::string result;
    for (char ch : input) {
        if (std::ispunct(ch)) {
            result += '\\';
        }
        result += ch;
    }

    std::cout << "Результат: " << result << std::endl;
    return 0;
}
//Строки в C++ представляют собой последовательности символов, которые могут включать в себя буквы, цифры, знаки препинания и другие символы.В C++ строки представлены типом string, который является частью стандартной библиотеки C++ (STL).
//
//Тип string предоставляет множество функций для работы со строками, таких как конкатенация, сравнение, поиск подстроки, преобразование регистра и т.д.Он также поддерживает интернационализацию и локализацию, что позволяет работать с различными языками и культурами.
//
//Тип char в C++ представляет собой символ и может использоваться для создания строк.Однако, в отличие от string, char не предоставляет функций для работы со строками, и для работы со строками на основе char часто используются массивы символов(char[]).
//
//Пример использования string :
//
//#include <string>
//#include <iostream>
//
//int main() {
//    std::string hello = "Hello, World!";
//    std::string greeting = "Hello";
//
//    // Конкатенация строк
//    std::string combined = hello + " " + greeting + " " + hello;
//
//    // Вывод результата
//    std::cout << combined << std::endl;
//
//    return 0;
//}
//
//
//В этом примере создаются две строки hello и greeting, затем они конкатенируются в одну строку combined и выводятся на экран.
//
//Пример использования char для создания строки :
//
//#include <iostream>
//
//int main() {
//    char hello[] = "Hello, World!";
//
//    // Вывод строки
//    std::cout << hello << std::endl;
//
//    return 0;
//}
//
//
//В этом примере создается массив символов hello, который содержит строку "Hello, World!".Затем эта строка выводится на экран.
//Оператор goto в C++ позволяет программе перейти к определенной метке в коде.Метка — это идентификатор, который начинается с двоеточия(:).Оператор goto используется вместе с меткой и указывает, к какой метке следует перейти.
//
//Пример использования оператора goto:
//
//#include <iostream>
//
//int main() {
//    int x = 0;
//    int y = 10;
//    int z = 20;
//
//    std::cout << "x = " << x << ", y = " << y << ", z = " << z << std::endl;
//
//    if (x == 0) {
//        goto label1;
//    }
//
//    std::cout << "x is not equal to 0" << std::endl;
//
//label1:
//    std::cout << "x = " << x << ", y = " << y << ", z = " << z << std::endl;
//
//    return 0;
//}
//
//
//В этом примере, если x равно 0, программа перейдет к метке label1 и продолжит выполнение кода с этой точки.Если x не равно 0, программа продолжит выполнение кода после оператора goto.
//
//Оператор goto часто считается плохим стилем программирования, так как он может привести к созданию запутанного и трудночитаемого кода.Вместо goto рекомендуется использовать циклы и условные операторы для управления потоком выполнения программы.
