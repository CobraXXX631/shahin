#include <iostream>

int main() {
    setlocale(LC_ALL, "Ru");
    float gramPrice;
    std::cout << "Введите цену за 1 грамм сахара: ";
    std::cin >> gramPrice;


    int startWeight = 250;
    int endWeight = 1500;
    int step = 100;


    std::cout << "Вес\tСтоимость" << std::endl;

    for (int weight = startWeight; weight <= endWeight; weight += step) {

        float cost = weight * gramPrice;
        std::cout << weight << "\t" << cost << "Руб" << std::endl;
    }

    return 0;
}
//Перегрузка конструкторов в C++ позволяет определить несколько конструкторов с разной сигнатурой для одного класса.Это позволяет предоставить разные способы создания объектов класса, в зависимости от контекста и требований к параметрам.
//
//Важно отметить, что у класса может быть только один default constructor(конструктор без параметров), если он определен явно.Если вы не определите default constructor явно, компилятор сгенерирует его для вас.
//
//Давайте рассмотрим пример перегрузки конструкторов :
//
//class Point {
//public:
//    // Конструктор без параметров (default constructor)
//    Point() : x(0), y(0) {}
//
//    // Конструктор с двумя параметрами
//    Point(int x, int y) : x(x), y(y) {}
//
//    // Геттеры для доступа к координатам точки
//    int getX() const { return x; }
//    int getY() const { return y; }
//
//private:
//    int x;
//    int y;
//};
//
//int main() {
//    // Создание объекта с использованием default constructor
//    Point p1;
//
//    // Создание объекта с использованием конструктора с параметрами
//    Point p2(10, 20);
//
//    // Вывод координат точек
//    std::cout << "p1 coordinates: (" << p1.getX() << ", " << p1.getY() << ")" << std::endl;
//    std::cout << "p2 coordinates: (" << p2.getX() << ", " << p2.getY() << ")" << std::endl;
//
//    return 0;
//}
//В этом примере класс Point имеет два конструктора :
//
//1. Point() - конструктор без параметров, который инициализирует точку с координатами(0, 0).
//2. Point(int x, int y) - конструктор с двумя параметрами, который инициализирует точку с заданными координатами.
//
//Когда вы пытаетесь создать объект класса, компилятор выбирает подходящий конструктор на основе количества и типов параметров, которые вы передаете.Если вы не предоставляете параметры, используется default constructor.Если вы предоставляете параметры, используется конструктор с соответствующим количеством и типами параметров.
//В C++ массивы являются одномерными, двумерными или многомерными.Один из способов создания массива — использование квадратных скобок.Например, следующий код создает одномерный массив из пяти элементов :
//
//int array[5];
//
//
//Двумерный массив создается следующим образом :
//
//int array[3][4];
//
//
//Этот массив содержит три строки и четыре столбца.
//
//Для инициализации массива при его создании можно использовать фигурные скобки :
//
//int array[3] = { 1, 2, 3 };
//
//
//Для двумерного массива :
//
//int array[2][2] = { {1, 2}, {3, 4} };
//
//
//Теперь давайте рассмотрим основные операции над массивами в C++:
//
//1. Доступ к элементам массива осуществляется с помощью индексации.Например, чтобы получить значение элемента с индексом i в массиве array, вы бы написали array[i].
//
//2. Вы можете копировать массивы с помощью оператора присваивания.Например, int anotherArray[5] = array; скопирует весь массив array в anotherArray.
//
//3. Можно присвоить массиву другой массив.Например, array = anotherArray; заменит содержимое массива array содержимым массива anotherArray.
//
//4. Можно копировать подмассивы.Например, int subArray[2] = array[1]; скопирует второй и третий элементы массива array в subArray.
//
//5. Вы можете пройтись по всем элементам массива с помощью цикла for.Например, for (int i = 0; i < 5; i++) { array[i] = i; } присвоит каждому элементу массива его индекс.
//
//    6. Чтобы узнать размер массива, вы можете использовать функцию sizeof с оператором / .Например, int rows = sizeof(array) / sizeof(array[0]); возвращает количество строк в двумерном массиве array.
//
//    7. Массивы можно передавать в функции в качестве аргументов.Например, void printArray(int arr[], int size) будет печатать элементы массива arr размером size.
//
//    8. Массивы можно возвращать из функций.Например, int* createArray(int size) может создавать новый массив и возвращать указатель на него.
//
//    Эти операции являются основными, и их понимание поможет вам эффективно работать с массивами в C++.
