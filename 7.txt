#include <iostream>
#include <vector>
#include <algorithm> 
using namespace std;


int max(vector<int> a) {
    int temp = 0;
    for (int i = 0; i < a.size(); i++)
    {
        if (a[temp] < a[i])
        {
            temp = i;
        }
    }
    return temp;
}

int min(vector<int> a) {
    int temp = 0;
    for (int i = 0; i < a.size(); i++)
    {
        if (a[temp] > a[i])
        {
            temp = i;
        }

    }
    return temp;
}

void spetial_sort(vector<int>& a) {
    int temp;
    for (int i = 0; i < a.size(); i++)
    {
        if (a[i] < 0) {
            temp = a[a.size() - 1];
            a[a.size() - 1] = a[i];
            a[i] = temp;
            a.pop_back();
        }
    }
    sort(a.begin(), a.end());
}


int main() {
    setlocale(LC_ALL, "Ru");

    cout << "Введите количество элементов в массиве: ";
    int num_elements;
    cin >> num_elements;

    vector<int> arr(num_elements);


    cout << "Введите элементы массива: ";
    for (int i = 0; i < num_elements; i++) {
        cin >> arr[i];
    }

    cout << "индекс максимального значения до сортировки: " << max(arr) << endl << "индекс минимального значения до сортировки: " << min(arr) << endl << endl;

    spetial_sort(arr);

    cout << "индекс максимального значения после сортировки: " << max(arr) << endl << "индекс минимального значения после сортировки: " << min(arr) << endl << endl;

    return 0;
}
//В C++ существуют три основных вида циклов :
//
//1. Цикл с постусловием(do...while) : Этот цикл выполняется хотя бы один раз, прежде чем проверяется условие.Условие проверяется после выполнения тела цикла.Это означает, что тело цикла всегда выполнится хотя бы один раз, даже если условие изначально ложно.
//
//do {
//    // Тело цикла выполняется
//} while (условие); // Условие проверяется после выполнения тела цикла
//
//
//2. Цикл с предусловием(while) : Этот цикл выполняется до тех пор, пока условие истинно.Перед каждым выполнением тела цикла проверяется условие.Если условие изначально ложно, тело цикла не выполнится ни разу.
//
//while (условие) {
//    // Тело цикла выполняется, пока условие истинно
//}
//
//
//3. Цикл с параметром(for) : Этот цикл часто используется для итерации по элементам массивов или другим последовательностям.Он состоит из трех частей : начальное условие(обычно инициализация переменной цикла), условие продолжения и шаг(обычно изменение переменной цикла).
//
//for (начальное условие; условие продолжения; шаг) {
//    // Тело цикла выполняется, пока условие продолжения истинно
//}
//
//
//Пример использования цикла for для итерации по элементам массива :
//
//int array[] = { 1, 2, 3, 4, 5 };
//for (int i = 0; i < sizeof(array) / sizeof(array[0]); ++i) {
//    std::cout << array[i] << " ";
//}
//std::cout << std::endl;
//
//
//В этом примере цикл for используется для печати элементов массива.Переменная i инициализируется нулем, и цикл продолжается до тех пор, пока i меньше размера массива.После каждой итерации i увеличивается на единицу.
//-----------------------------------------------------------------------------------------------------------------------
//В C++ переменные могут быть объявлены как локальные или глобальные.
//
//Локальные переменные объявляются внутри блока кода, например, внутри функции или внутри блока if, for и т.д.Их область видимости ограничена этим блоком, и они доступны только внутри этого блока.Примеры локальных переменных :
//
//void someFunction() {
//    int localVariable = 10; // Локальная переменная
//    // ...
//}
//
//
//Глобальные переменные объявляются вне всех функций и блоков кода.Они доступны из любого места в программе, где они видны.Глобальные переменные обычно объявляются в начале файла кода, перед любыми функциями.Примеры глобальных переменных :
//
//int globalVariable = 10; // Глобальная переменная
//
//void someFunction() {
//    // globalVariable доступна здесь
//}
//
//
//Важно отметить, что использование глобальных переменных может привести к проблемам с управлением ресурсами и сложностью понимания кода, поскольку они могут быть изменены из любой точки программы.Поэтому рекомендуется использовать глобальные переменные осторожно и только тогда, когда это действительно необходимо.
