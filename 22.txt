№22
#include <iostream>

bool isDivisibleByN(int number, int N) {
    return number % N == 0;
}

int main() {
    setlocale(LC_ALL, "RU");
    int N, number;

    std::cout << "Введите число N: ";
    std::cin >> N;

    std::cout << "Введите число для проверки: ";
    std::cin >> number;

    if (isDivisibleByN(number, N)) {
        std::cout << "Число делится на " << N << std::endl;
    }
    else {
        std::cout << "Число не делится на " << N << std::endl;
    }

    return 0;
}












/*
Вар22
Функции в C++ — это блоки кода, которые выполняют определенную задачу и могут быть вызваны из разных мест программы. Они позволяют повторно использовать код и делают программу более структурированной и понятной.

Возврат результата из функции осуществляется с помощью оператора return. Этот оператор останавливает выполнение функции и возвращает управление вызвавшему коду. При этом можно вернуть значение, которое будет доступно в месте вызова функции.

Пример функции, возвращающей значение:

#include <iostream>

int add(int a, int b) {
    return a + b; // Возвращаем сумму двух чисел
}

int main() {
    int result = add(5, 3); // Вызываем функцию add и сохраняем результат в переменной result
    std::cout << "5 + 3 = " << result << std::endl; // Выводим результат на экран
    return 0;
}


В этом примере функция add принимает два целых числа a и b и возвращает их сумму. В функции main вызывается функция add с аргументами 5 и 3, и результат сохраняется в переменной result. Затем результат выводится на экран.

Оператор return может быть использован и без значения, если функция не должна возвращать результат. В таком случае, когда достигается оператор return, функция немедленно завершает свою работу, и управление передается обратно вызвавшему коду.

Пример функции, которая не возвращает значение:

#include <iostream>

void printHelloWorld() {
    std::cout << "Hello, World!" << std::endl;
    return; // Функция завершает свою работу
}

int main() {
    printHelloWorld(); // Вызываем функцию и выводим "Hello, World!"
    return 0;
}


В этом примере функция printHelloWorld выводит строку "Hello, World!" на экран и завершает свою работу с помощью оператора return. Поскольку функция не возвращает значение, тип возвращаемого значения указан как void.
Сортировка массива методом вставки в C++ - это алгоритм сортировки, который включает в себя перемещение элементов массива на их правильные позиции путем последовательных вставок. Вот пример реализации этого алгоритма:

#include <iostream>
#include <vector>

// Функция для сортировки массива методом вставки
void insertionSort(std::vector<int>& arr) {
    int size = arr.size();
    for (int i = 1; i < size; ++i) {
        int key = arr[i];
        int j = i - 1;

        // Перемещаем элементы arr[0..i-1], которые больше, чем key,
        // на одну позицию вперед от их текущих позиций
        // и делаем пробел для key
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

int main() {
    std::vector<int> arr = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};
    insertionSort(arr);

    // Вывод отсортированного массива
    for (int i = 0; i < arr.size(); ++i) {
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;

    return 0;
}


Этот код сначала определяет функцию insertionSort, которая принимает вектор целых чисел и сортирует его методом вставки. Затем в функции main создается вектор с неупорядоченными числами, который передается в функцию insertionSort для сортировки. После сортировки массив выводится на экран. 

*/