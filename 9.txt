#include <iostream>
#include <vector>

using namespace std;
class MyClass {
private:
    int privateAttribute;

public:
    int publicAttribute1;
    int publicAttribute2;
    int publicAttribute3;


    MyClass(int pAttr, int pa1, int pa2, int pa3) : privateAttribute(pAttr), publicAttribute1(pa1), publicAttribute2(pa2), publicAttribute3(pa3) {}


    int getPrivateAttribute() {
        return privateAttribute;
    }


    void printAttributes() {
        std::cout << "privateAttribute: " << privateAttribute << std::endl;
        std::cout << "publicAttribute1: " << publicAttribute1 << std::endl;
        std::cout << "publicAttribute2: " << publicAttribute2 << std::endl;
        std::cout << "publicAttribute3: " << publicAttribute3 << std::endl;
    }
};

int main() {
    MyClass myObject(10, 20, 30, 40);
    myObject.printAttributes();
    std::cout << "privateAttribute: " << myObject.getPrivateAttribute() << std::endl;
    return 0;
}
//Программа на C++ состоит из нескольких основных частей :
//
//1. * *Заголовок файла * *: В начале файла обычно указывается комментарий, описывающий содержимое файла.Заголовок может включать информацию о версии компилятора, авторские права и другие метаданные.
//
//// File: example.cpp
//// Author: John Doe
//// Date: March 10, 2023
//// Purpose: Example program in C++
//
//
//2. * *Импорт библиотек и пространств имен * *: Если программа использует стандартные библиотеки или пользовательские пространства имен, они должны быть объявлены в начале файла с помощью директивы using namespace или using std::.
//
//#include <iostream> // Для использования cout, cin и других функций ввода/вывода
//#include <vector>   // Для использования векторов
//#include "mylibrary.h" // Пользовательская библиотека
//
//
//3. * *Определение классов * *: Классы определяются в разделе класса.Каждый класс начинается с ключевого слова class, struct или union.Внутри класса определены его члены : данные(поля) и функции(методы).
//
//class MyClass {
//public:
//    int myField;
//    void myMethod() { / *  ...  * / }
//};
//
//
//4. * *Функции и методы * *: Функции и методы определяются внутри класса или вне его.Внешние функции и методы объявляются перед их использованием.
//
//void externalFunction() { / *  ...  * / }
//
//int main() {
//    externalFunction();
//    return 0;
//}
//
//
//5. * *Основной цикл программы * *: В большинстве случаев программа начинается с функции main(), которая является точкой входа в программу.Внутри main() происходит выполнение основной логики программы.
//
//int main() {
//    // Здесь находится основная логика программы
//    return 0;
//}
//
//
//6. * *Комментарии * *: Комментарии используются для документирования кода, объяснения сложных конструкций и улучшения читаемости.В C++ комментарии могут быть многострочными(/ **/ ) или однострочными(//).
//
//    7. * *Объявления переменных * *: Переменные могут быть объявлены глобально(вне всех функций), статически(внутри функции, но с ключевым словом static), автоматически(локальные переменные внутри функции) или динамически(с использованием операторов new).
//
//    8. * *Управление потоком выполнения * *: В C++ доступны различные конструкции для управления порядком выполнения команд, включая условные операторы(if, else, switch, case), циклы(for, while, do - while), оператор goto и т.д.
//
//    9. * *Вывод и ввод данных * *: Для вывода данных используется поток std::cout, а для ввода — std::cin.Также можно использовать потоки std::cerr и std::clog для вывода ошибок и отладочной информации соответственно.
//
//    10. * *Массивы и списки * *: В C++ для работы со списками значений используются массивы и векторы.Массивы имеют фиксированный размер и индексируются целыми числами, начиная с нуля.Векторы являются частью стандартной библиотеки и позволяют работать с динамическими списками.
//
//    11. * *Файловый ввод / вывод * *: Для работы с файлами используются потоки(std::fstream, std::ofstream, std::ifstream).Они позволяют читать и записывать данные в файлы на диске.
//
//    12. * *Обработка исключений * *: В C++ доступна система обработки исключений, позволяющая перехватывать ошибки во время выполнения и корректно обрабатывать их.
//
//    Это лишь базовая структура программы на C++, и реальные программы могут значительно отличаться в зависимости от их сложности и специфики.
//-------------------------------------------------------------------------------------------------------    
//Многомерные массивы представляют собой массивы, каждый элемент которых сам является массивом.Это позволяет хранить и обрабатывать данные, которые организованы в виде таблиц, списков или других структур, где каждый элемент имеет несколько компонентов.
//
//    Для создания многомерного массива в C++ вы можете использовать стандартный тип std::array, который предоставляет удобный способ работы с массивами фиксированного размера.Вот пример создания двумерного массива(матрицы) размером 3x3 :
//
//#include <array>
//
//    int main() {
//    // Создание двумерного массива (матрицы) размером 3x3
//    std::array<std::array<int, 3>, 3> matrix = {
//        { // Первый ряд
//            {1, 2, 3}, // Первый столбец
//            {4, 5, 6}, // Второй столбец
//            {7, 8, 9}  // Третий столбец
//        }
//    };
//
//    // Вывод элементов матрицы
//    for (int i = 0; i < 3; ++i) {
//        for (int j = 0; j < 3; ++j) {
//            std::cout << matrix[i][j] << " ";
//        }
//        std::cout << std::endl;
//    }
//
//    return 0;
//}
//
//
//В этом примере matrix является двумерным массивом, где каждый внутренний массив(std::array<int, 3>) представляет собой строку матрицы, а внешний массив содержит эти строки.
//
//Чтобы ввести элементы многомерного массива, вы можете использовать стандартный поток ввода std::cin:
//
//#include <iostream>
//#include <array>
//
//int main() {
//    const size_t ROWS = 3;
//    const size_t COLS = 3;
//
//    std::array<std::array<int, COLS>, ROWS> matrix;
//
//    // Ввод элементов матрицы
//    for (size_t i = 0; i < ROWS; ++i) {
//        for (size_t j = 0; j < COLS; ++j) {
//            std::cin >> matrix[i][j];
//        }
//    }
//
//    // Вывод элементов матрицы
//    for (const auto& row : matrix) {
//        for (const auto& val : row) {
//            std::cout << val << " ";
//        }
//        std::cout << std::endl;
//    }
//
//    return 0;
//}
//
//
//В этом примере сначала определяется размерность матрицы, затем создается двумерный массив matrix.После этого программа считывает значения для каждой ячейки матрицы и выводит их на экран.
