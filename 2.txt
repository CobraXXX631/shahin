#include <iostream>
#include <cmath>

using namespace std;

struct Point {
    double x;
    double y;
};

double distance(const Point& p1, const Point& p2) {
    return sqrt(pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2));
}

double area(const Point& p1, const Point& p2) {
    return distance(p1, p2) * distance(p1, p2);
}

double perimeter(const Point& p1, const Point& p2) {
    return 4 * distance(p1, p2);
}

int main() {
    setlocale(LC_ALL, "RU");
    Point p1, p2;

    cout << "Введите кординаты (x1, y1): ";
    cin >> p1.x >> p1.y;

    cout << "Введите кординаты (x2, y2): ";
    cin >> p2.x >> p2.y;

    cout << "Площадь: " << area(p1, p2) << endl;
    cout << "Периметр: " << perimeter(p1, p2) << endl;

    return 0;
}
//** Использование указателей в качестве аргументов функций в C++ * *
//
//Указатели могут использоваться в качестве аргументов функций для достижения следующих целей :
//
//***Передача данных по ссылке : **При передаче указателя в функцию изменения, сделанные с указателем в функции, будут отражены в переменной, на которую он указывает, в вызывающей функции.
//*** Изменение значения указателя : **Функции могут изменять значение указателя, то есть указывать на другую область памяти.
//*** Экономия памяти : **Использование указателей в качестве аргументов может сэкономить память, так как вместо копирования фактических данных передается только адрес.
//
//** Синтаксис**
//
//При передаче указателя в функцию необходимо использовать оператор `&` для получения адреса переменной.В объявлении функции тип параметра объявляется с использованием указателя(*).
//
//** Пример**
//
//Рассмотрим функцию, которая принимает указатель на целочисленную переменную и увеличивает ее значение на 1:
//
//```cpp
//void increment(int* ptr) {
//    (*ptr)++;
//}
//```
//
//В вызывающей функции можно передать адрес переменной функции следующим образом :
//
//```cpp
//int main() {
//    int x = 10;
//    increment(&x); // Передача адреса x функции increment
//    cout << x << endl; // Выведет 11
//    return 0;
//}
//```
//
//** Преимущество использования указателей в качестве аргументов функций : **
//
//Использование указателей в качестве аргументов функций может привести к более эффективному и гибкому коду за счет :
//
//*Избежания копирования больших объемов данных.
//* Возможности изменения значения указателя в функции.
//* Предоставления доступа к данным, хранящимся в других частях программы.
//--------------------------------------------------------------------------------------------------
//** Блок - схемы в C++ * *
//
//Блок - схемы - это графические представления алгоритмов, которые используют стандартные символы для обозначения различных шагов и потока управления.
//
//** Основные элементы блок - схем * *
//
//Блок - схемы используют следующие основные элементы :
//
//***Начало / Конец : **Определяют начало и конец алгоритма.
//* **Процесс : **Представляет действие или вычисление.
//* **Решение : **Управляет потоком алгоритма на основе условия.
//* **Ввод / Вывод : **Представляет ввод данных с устройства или вывод данных на устройство.
//* **Соединители : **Связывают различные элементы блок - схемы.
//
//* *Пример блок - схемы в C++ * *
//
//Рассмотрим алгоритм, который вычисляет среднее арифметическое трех чисел :
//
//```
//Начало
//
//Ввод : a, b, c
//
//Среднее = (a + b + c) / 3
//
//Вывод : Среднее
//
//Конец
//```
//
//* *Соответствующая блок - схема:**
//
//[Начало] -- > [Ввод:a, b, c] -- > [Среднее = (a + b + c) / 3] -- > [Вывод:Среднее] -- > [Конец]
//
//* *Преимущества использования блок - схем * *
//
//Блок - схемы предоставляют следующие преимущества :
//
//*Улучшают понимание алгоритмов.
//* Помогают визуализировать поток управления.
//* Облегчают документирование и обмен алгоритмами.