#include <iostream>
#include <string>

using namespace std;

int main() {
	setlocale(LC_ALL, "RU");
	string line;
	cout << "Введите: ";
	getline(cin, line);
	int index;
	char replacement;
	cout << "Введите индекс символа, который требуется заменить: ";
	cin >> index;
	cout << "Введите заменяющий символ: ";
	cin >> replacement;
	line[index] = replacement;
	line[line.length() - 1] = '.';
	cout << "Изменено: " << line << endl;
	return 0;
}
//В C++ область видимости переменных внутри функции определяется их типом и способом объявления.Переменные, объявленные внутри функции, имеют локальную область видимости и доступны только внутри этой функции.Переменные, объявленные вне функции(глобальные переменные), доступны во всем файле, в котором они объявлены.
//
//При передаче параметров в функцию в C++ используются следующие правила :
//
//1. По умолчанию параметры передаются по значению.Это означает, что функция получает копию переданного значения.
//
//2. Если необходимо передать ссылку на переменную, можно использовать ключевое слово& перед именем параметра.Это позволяет функции изменять оригинальное значение переменной.
//
//3. Если необходимо передать указатель на переменную, можно использовать оператор& перед именем переменной при вызове функции.Это позволяет функции изменять значение переменной, на которую указывает указатель.
//
//4. Если необходимо передать переменную по ссылке, можно использовать оператор& перед именем переменной при объявлении параметра функции.Это позволяет функции изменять значение переменной, на которую указывает ссылка.
//
//Пример функции с передачей параметров по значению, по ссылке и по указателю :
//
//#include <iostream>
//
//// Функция, принимающая параметр по значению
//void functionByVal(int value) {
//    std::cout << "Value: " << value << std::endl;
//}
//
//// Функция, принимающая параметр по ссылке
//void functionByRef(int& value) {
//    std::cout << "Reference: " << value << std::endl;
//    value = 10; // Изменение переданного значения
//}
//
//// Функция, принимающая параметр по указателю
//void functionByPtr(int* value) {
//    std::cout << "Pointer: " << *value << std::endl;
//    *value = 20; // Изменение значения, на которое указывает указатель
//}
//
//int main() {
//    int x = 5;
//
//    // Вызов функции с передачей значения
//    functionByVal(x);
//    std::cout << "Value after functionByVal: " << x << std::endl;
//
//    // Вызов функции с передачей ссылки
//    functionByRef(x);
//    std::cout << "Value after functionByRef: " << x << std::endl;
//
//    // Вызов функции с передачей указателя
//    functionByPtr(&x);
//    std::cout << "Value after functionByPtr: " << x << std::endl;
//
//    return 0;
//}
//
//
//В этом примере функция functionByVal получает копию переданного значения, functionByRef получает ссылку на переменную, а functionByPtr получает указатель на переменную.После вызова каждой функции выводится текущее значение переменной x, чтобы продемонстрировать, как изменяется значение в зависимости от способа передачи параметра.
//В C++ существуют различные условные конструкции, которые позволяют выполнять разные действия в зависимости от условий.Вот некоторые из них :
//
//1. * *Оператор if** : Это основная условная конструкция, которая позволяет выполнить блок кода, если условие истинно.
//
//if (условие) {
//    // Блок кода, который выполняется, если условие истинно
//}
//
//
//2. * *Оператор else **: Этот оператор используется вместе с if для выполнения дополнительного блока кода, если условие if ложно.
//
//if (условие) {
//    // Блок кода, который выполняется, если условие истинно
//}
//else {
//    // Блок кода, который выполняется, если условие ложно
//}
//
//
//3. * *Оператор else if** : Этот оператор позволяет добавить дополнительные условия после else, что позволяет выполнить более сложные ветвления.
//
//if (условие1) {
//    // Блок кода для условия1
//}
//else if (условие2) {
//    // Блок кода для условия2
//}
//else if (условие3) {
//    // Блок кода для условия3
//}
//else {
//    // Блок кода для случая, когда все условия ложны
//}
//
//
//4.     Операторы тернарный(conditional operator) : Это оператор позволяет выбрать одно из двух значений в зависимости от истинности условия.
//
//значение = (условие) ? значение_если_истина : значение_если_ложь;
//
//
//5.     Цикл while    : Этот цикл выполняет блок кода, пока условие истинно.
//
//while (условие) {
//    // Блок кода, который выполняется, пока условие истинно
//}
//
//
//6. * *Цикл do - while** : Этот цикл похож на while, но отличается тем, что условие проверяется после выполнения блока кода, что гарантирует выполнение блока кода хотя бы один раз.
//
//do {
//    // Блок кода, который выполняется хотя бы один раз
//} while (условие);
//
//
//7.     Цикл for    : Этот цикл используется для итерации по элементам массивов или другим последовательностям.Он состоит из трех частей : начальное условие, условие продолжения и шаг.
//
//for (начальное условие; условие продолжения; шаг) {
//    // Блок кода, который выполняется, пока условие продолжения истинно
//}
//
//
//8. * *Операторы логические * *: Эти операторы используются для объединения или исключения условий.Например, && для логического И, || для логического ИЛИ, !для отрицания.
//
//if ((условие1 && условие2) || !условие3) {
//    // Блок кода, который выполняется, если условие1 и условие2 истинны или условие3 ложно
//}
//
//
//Это основные условные конструкции в C++, которые позволяют управлять потоком выполнения программы в зависимости от различных условий.
