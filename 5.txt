#include <iostream>

using namespace std;

int main() {
    setlocale(LC_ALL, "RU");
    int day;
    cout << "Введите день: ";
    cin >> day;
    string days[] = { "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота", "Воскресенье" };
    cout << "День недели: " << days[(day) % 7] << endl;
    return 0;
} 
//Класс в C++ представляет собой структуру, которая определяет набор связанных данных(членов данных) и функций(методов), работающих с этими данными.Методы класса определяются внутри тела класса и могут быть статическими или нестатическими.
//
//Статические методы принадлежат самому классу и не требуют экземпляра класса для их вызова.Они не имеют доступа к нестатическим членам класса, так как нестатические члены связаны с конкретным экземпляром класса.Статические методы обычно используются для предоставления общего функционала, не зависящего от конкретного экземпляра класса.
//
//Нестатические методы являются частью экземпляра класса и могут обращаться к нестатическим членам этого экземпляра.Они вызываются через объект класса и могут быть переопределены в производных классах.
//
//Вот пример класса с обоими типами методов :
//
//#include <iostream>
//
//class MyClass {
//public:
//    // Статический метод
//    static void staticMethod() {
//        std::cout << "staticMethod called." << std::endl;
//    }
//
//    // Нестатический метод
//    void instanceMethod() {
//        std::cout << "instanceMethod called." << std::endl;
//    }
//};
//
//int main() {
//    // Вызов статического метода без создания экземпляра класса
//    MyClass::staticMethod();
//
//    // Создание экземпляра класса
//    MyClass obj;
//
//    // Вызов нестатического метода через экземпляр класса
//    obj.instanceMethod();
//
//    return 0;
//}
//
//
//В этом примере staticMethod является статическим методом, и он вызывается непосредственно через имя класса MyClass.instanceMethod является нестатическим методом, и он вызывается через экземпляр класса obj.
//----------------------------------------------------------------------------------------------
//Наследование в C++ позволяет создавать новые классы на основе существующих, наследуя все их свойства и методы.Это мощный механизм объектно - ориентированного программирования, который позволяет повторно использовать код и улучшать его функциональность.
//
//Давайте рассмотрим пример наследования в C++:
//
//// Определение базового класса Animal
//class Animal {
//public:
//    virtual void speak() = 0; // Виртуальный абстрактный метод
//    virtual ~Animal() {} // Виртуальный деструктор
//};
//
//// Определение производного класса Dog, наследующего от Animal
//class Dog : public Animal {
//public:
//    void speak() override {
//        std::cout << "Woof!" << std::endl;
//    }
//};
//
//// Определение производного класса Cat, также наследующего от Animal
//class Cat : public Animal {
//public:
//    void speak() override {
//        std::cout << "Meow!" << std::endl;
//    }
//};
//
//int main() {
//    // Создание объектов разных типов животных
//    Animal* animalPtr = new Dog();
//    Animal* catPtr = new Cat();
//
//    // Вызов метода speak для каждого объекта
//    animalPtr->speak(); // Выведет "Woof!"
//    catPtr->speak();    // Выведет "Meow!"
//
//    // Освобождение памяти
//    delete animalPtr;
//    delete catPtr;
//
//    return 0;
//}
//
//
//В этом примере мы определили базовый класс Animal с виртуальным абстрактным методом speak(), который должен быть реализован в каждом производном классе.Производные классы Dog и Cat наследуют от Animal и реализуют метод speak() каждый по - своему.
//
//Мы также использовали указатели на базовый класс Animal для хранения адресов объектов разных типов животных.Это возможно благодаря полиморфизму, который позволяет использовать объекты производных классов через указатели на базовый класс.
//
//Виртуальные методы и деструкторы позволяют обеспечить корректное управление памятью при использовании указателей на базовые классы и предотвращают ошибки во время выполнения программы, связанные с неправильным вызовом методов или деструкторов.
