#include <iostream>
#include <vector>

int main() {
    setlocale(LC_ALL, "RU");
    const int rows = 5;
    const int cols = 5;
    std::vector<std::vector<int>> matrix(rows, std::vector<int>(cols));

    // Заполнение матрицы
    //for (int i = 0; i < rows; ++i) {
    //    for (int j = 0; j < cols; ++j) {
    //        matrix[i][j] = std::rand() % 10 + 1; // Случайные числа от 1 до 10
    //    }
    //}
    matrix[0] = { 3, 8, 8, 9, 4 };
    matrix[1] = { 4, 1, 9, 3, 7 };
    matrix[2] = { 2, 3, 2, 9, 9 };
    matrix[3] = { 1, 3, 7, 3, 4 };
    matrix[4] = { 1, 4, 9, 2, 1 };


    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            std::cout << matrix[i][j] << " ";
        }
        std::cout << std::endl;
    }

    double mainDiagonalSum = 0.0;
    for (int i = 0; i < rows; ++i) {
        mainDiagonalSum += matrix[i][i];
    }

    double sideDiagonalSum = 0.0;
    for (int i = 0, j = cols - 1; i < rows && j >= 0; --j, ++i) {
        sideDiagonalSum += matrix[i][j];
    }

    double mainDiagonalAverage = mainDiagonalSum / rows;
    double sideDiagonalAverage = sideDiagonalSum / rows;

    std::cout << "Среднеарифметическое главной диагонали: " << mainDiagonalAverage << std::endl;
    std::cout << "Среднеарифметическое побочной диагонали: " << sideDiagonalAverage << std::endl;

    return 0;
}
//В C++ динамические массивы создаются с помощью оператора new, который выделяет память для объекта в куче(heap).В отличие от статических массивов, которые имеют фиксированный размер и размещаются в стеке(stack), динамические массивы могут быть созданы во время выполнения программы и имеют размер, который может изменяться.
//
//Пример создания динамического массива и его освобождения :
//
//#include <iostream>
//
//int main() {
//    // Создание динамического массива из 5 элементов типа int
//    int* dynamicArray = new int[5];
//
//    // Инициализация элементов массива
//    for (int i = 0; i < 5; ++i) {
//        dynamicArray[i] = i;
//    }
//
//    // Вывод элементов массива
//    for (int i = 0; i < 5; ++i) {
//        std::cout << dynamicArray[i] << " ";
//    }
//    std::cout << std::endl;
//
//    // Освобождение памяти, занятой массивом
//    delete[] dynamicArray; // Важно использовать delete[] для массивов
//
//    return 0;
//}
//
//
//В этом примере мы создаем динамический массив из пяти элементов типа int, инициализируем его, выводим элементы на экран, а затем освобождаем память, занятую массивом, с помощью delete[].Важно использовать delete[] для массивов, чтобы корректно освободить память, выделенную для всех элементов массива.
//
//Также стоит отметить, что при работе с динамическими массивами важно не забывать освобождать память, чтобы избежать утечек памяти.
//В C++ функции являются основным строительным блоком программы.Они позволяют группировать код, который выполняет определенную задачу, и могут быть вызваны из разных мест программы.
//
//Создание функции в C++ включает в себя определение ее прототипа и реализацию.Прототип функции определяет ее имя, возвращаемый тип и список параметров.Реализация функции содержит код, который выполняется при вызове функции.
//
//Вот пример создания функции в C++:
//
//// Прототип функции
//int add(int a, int b);
//
//// Реализация функции
//int add(int a, int b) {
//    return a + b; // Возвращает сумму двух чисел
//}
//
//int main() {
//    // Вызов функции и вывод результата
//    std::cout << "5 + 3 = " << add(5, 3) << std::endl;
//    return 0;
//}
//
//
//В этом примере определена функция add, которая принимает два целых числа a и b и возвращает их сумму.В функции main происходит вызов функции add с аргументами 5 и 3, и результат выводится на экран.
//
//Важно отметить, что в C++ функции могут принимать параметры по значению, по ссылке и по указателю.Они также могут возвращать значения и не возвращать ничего(void).Кроме того, функции могут быть перегружены, что позволяет использовать одно и то же имя для разных функций с разными списками параметров.
