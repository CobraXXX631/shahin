№24
#include <iostream>
#include <string>

class Animal {
public:
    Animal() : age(0) {} 
    virtual void speak() = 0;
    virtual void move() = 0;
    std::string name;
    int age;
};

class Dog : public Animal {
public:
    Dog() : Animal() {} 
    void speak() override { std::cout << "Гав!" << std::endl; }
    void move() override { std::cout << "Бежит и прыгает!" << std::endl; }
};

class Cat : public Animal {
public:
    Cat() : Animal() {} 
    void speak() override { std::cout << "Мяу!" << std::endl; }
    void move() override { std::cout << "Карабкается и цепляется!" << std::endl; }
};

int main() {
    setlocale(LC_ALL, "RU");
    
    Dog buddy;
    buddy.name = "Buddy";
    buddy.age = 3;

    Cat fluffy;
    fluffy.name = "Fluffy";
    fluffy.age = 1;

    buddy.speak();
    buddy.move();

    fluffy.speak();
    fluffy.move();

    return 0;
}








/*
Вар24
1. Многомерные массивы и ввод-вывод элементов массива:
Многомерные массивы представляют собой массивы, которые содержат другие массивы. Они могут быть двухмерными, трехмерными и т.д. Для ввода и вывода элементов многомерного массива можно использовать циклы и индексы.
--------------------------------------------------------------------------

2. Основы структурного программирования:
Структурное программирование — это подход к написанию программ, основанный на использовании простых конструкций управления, таких как последовательность, ветвление и цикл.

Основные принципы структурного программирования:
- Программа должна быть структурирована таким образом, чтобы каждый блок кода выполнял одну задачу.
- Использование блоков кода (функций, методов) для группировки связанных действий.
- Управление потоком выполнения программы должно осуществляться с помощью простых конструкций, таких как if-else, while, do-while, for.
- Структура программы должна быть понятной и легко читаемой. 

*/