#include <iostream>
#include <string>
int countPunctuation(const std::string& input) {
    int count = 0;
    for (char ch : input) {
        if (std::ispunct(ch)) {
            ++count;
        }
    }
    return count;
}

int main() {
    setlocale(LC_ALL, "RU");
    std::string input;
    std::cout << "Введите строку: ";
    std::getline(std::cin, input);

    int punctuationCount = countPunctuation(input);
    std::cout << "Количество знаков препинания в строке: " << punctuationCount << std::endl;

    return 0;
}
//В C++ существуют различные типы данных, которые можно разделить на две категории : простые и составные.
//
//Простые типы данных включают :
//
//-Целочисленные типы : signed char, short int, int, long int, long long int, unsigned char, unsigned short int, unsigned int, unsigned long int, unsigned long long int.
//- Беззнаковые целочисленные типы : unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long.
//- Знаковые целочисленные типы : char, short, int, long, long long.
//- Типы с плавающей точкой : float, double, long double.
//- Электронные типы : bool.
//
//Составные типы данных включают :
//
//-Массивы : Разновидность последовательных контейнеров, содержащих элементы одного типа.
//- Строки : Тип данных, представляющий собой последовательность символов.
//- Указатели : Типы, которые хранят адреса памяти.
//- Объединения и структуры : Типы, которые объединяют различные данные разных типов в одну единицу.
//- Классы и объекты : Определяемые пользователем типы данных, которые могут включать в себя данные различных типов, а также функции и методы.
//- Фундаментальные типы : void, wchar_t, char16_t, char32_t.
//
//Каждый из этих типов данных имеет свои особенности и области применения, и выбор конкретного типа зависит от задачи, которую необходимо решить.
//Для начала работы с библиотеками vector, list и алгоритмами STL, вам необходимо подключить соответствующие заголовочные файлы.Вот как это делается :
//
//1. Для работы с контейнером std::vector подключите заголовочный файл <vector>.
//
//#include <vector>
//
//
//2. Для работы с контейнером std::list подключите заголовочный файл <list>.
//
//#include <list>
//
//
//3. Для работы с алгоритмами STL, которые являются частью стандартной библиотеки C++, подключите заголовочный файл <algorithm>.
//
//#include <algorithm>
//
//
//После подключения этих заголовочных файлов вы сможете использовать все возможности контейнеров std::vector и std::list, а также алгоритмы STL для работы с коллекциями данных в вашем коде на C++.
