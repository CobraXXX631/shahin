#include <iostream>
#include <iomanip> 
#include <cmath>   
int main() {
    setlocale(LC_ALL, "RU");
    const int SIZE = 5;
    double matrix[SIZE][SIZE];


    for (int i = 0; i < SIZE; ++i) {
        for (int j = 0; j < SIZE; ++j) {
            matrix[i][j] = rand() % 100 + 1;
        }
    }


    for (int i = 0; i < SIZE; ++i) {
        for (int j = 0; j < SIZE; ++j) {
            std::cout << std::fixed << std::setprecision(0) << matrix[i][j] << ' ';
        }
        std::cout << std::endl;
    }


    for (int j = 0; j < SIZE; ++j) {
        double sum = 0.0;
        for (int i = 0; i < SIZE; ++i) {
            sum += matrix[i][j];
        }
        std::cout << "Среднее арифметическое столбца " << j + 1 << ": " << sum / SIZE << std::endl;
    }

    return 0;
}
//В C++ существуют различные условные конструкции, которые позволяют выполнять разные действия в зависимости от условий.Вот некоторые из них :
//
//1. * *Оператор if** : Это основная условная конструкция, которая позволяет выполнить блок кода, если условие истинно.
//
//if (условие) {
//    // Блок кода, который выполняется, если условие истинно
//}
//
//
//2. * *Оператор else **: Этот оператор используется вместе с if для выполнения дополнительного блока кода, если условие if ложно.
//
//if (условие) {
//    // Блок кода, который выполняется, если условие истинно
//}
//else {
//    // Блок кода, который выполняется, если условие ложно
//}
//
//
//3. * *Оператор else if** : Этот оператор позволяет добавить дополнительные условия после else, что позволяет выполнить более сложные ветвления.
//
//if (условие1) {
//    // Блок кода для условия1
//}
//else if (условие2) {
//    // Блок кода для условия2
//}
//else if (условие3) {
//    // Блок кода для условия3
//}
//else {
//    // Блок кода для случая, когда все условия ложны
//}
//
//
//4.     Операторы тернарный(conditional operator) : Это оператор позволяет выбрать одно из двух значений в зависимости от истинности условия.
//
//значение = (условие) ? значение_если_истина : значение_если_ложь;
//
//
//5.     Цикл while    : Этот цикл выполняет блок кода, пока условие истинно.
//
//while (условие) {
//    // Блок кода, который выполняется, пока условие истинно
//}
//
//
//6. * *Цикл do - while** : Этот цикл похож на while, но отличается тем, что условие проверяется после выполнения блока кода, что гарантирует выполнение блока кода хотя бы один раз.
//
//do {
//    // Блок кода, который выполняется хотя бы один раз
//} while (условие);
//
//
//7.     Цикл for    : Этот цикл используется для итерации по элементам массивов или другим последовательностям.Он состоит из трех частей : начальное условие, условие продолжения и шаг.
//
//for (начальное условие; условие продолжения; шаг) {
//    // Блок кода, который выполняется, пока условие продолжения истинно
//}
//
//
//8. * *Операторы логические * *: Эти операторы используются для объединения или исключения условий.Например, && для логического И, || для логического ИЛИ, !для отрицания.
//
//if ((условие1 && условие2) || !условие3) {
//    // Блок кода, который выполняется, если условие1 и условие2 истинны или условие3 ложно
//}
//
//
//Это основные условные конструкции в C++, которые позволяют управлять потоком выполнения программы в зависимости от различных условий.
//-------------------------------------------------------------------------------------
//Массив в C++ - это структура данных, которая хранит группу элементов одного типа.Элементы массива располагаются в непрерывной области памяти, и каждый элемент имеет свой уникальный индекс, который начинается с нуля.
//
//Для описания одномерного массива в C++ вам нужно указать тип данных элементов массива и размер массива.Размер массива должен быть известен во время компиляции, поэтому вы не можете динамически изменять размер массива во время выполнения программы.
//
//Вот пример описания и инициализации одномерного массива в C++:
//
//#include <iostream>
//
//int main() {
//    // Описание массива из 5 целых чисел
//    int myArray[5];
//
//    // Инициализация массива значениями
//    for (int i = 0; i < 5; ++i) {
//        myArray[i] = i * 2; // Заполнение массива последовательными парами
//    }
//
//    // Вывод значений массива
//    for (int i = 0; i < 5; ++i) {
//        std::cout << myArray[i] << " ";
//    }
//    std::cout << std::endl;
//
//    return 0;
//}
//
//
//В этом примере мы описываем массив myArray размером 5, который может хранить целые числа.Затем мы инициализируем каждый элемент массива, умножая его индекс на 2. После этого мы выводим значения массива на экран.
