#include <iostream>
#include <random>
#include <algorithm>

int main() {
    const int size = 9;
    int array[size];


    std::random_device rd;
    std::mt19937 gen(rd());


    for (int i = 0; i < size; ++i) {
        array[i] = gen() % 100;
    }


    for (int i = 0; i < size; ++i) {
        std::cout << array[i] << " ";
    }
    std::cout << std::endl;


    auto minmax = std::minmax_element(array, array + size);


    std::iter_swap(minmax.first, minmax.second);


    for (int i = 0; i < size; ++i) {
        std::cout << array[i] << " ";
    }
    std::cout << std::endl;

    return 0;
}
//Наследование в C++ позволяет определить новый класс на основе уже существующего, наследуя все его характеристики и поведение.Это позволяет создавать иерархии классов, где каждый класс может наследовать от одного или нескольких родительских классов и реализовывать свои уникальные характеристики и поведение.
//
//Вот пример наследования в C++:
//
//// Определение базового класса Animal
//class Animal {
//public:
//    virtual void speak() = 0; // Виртуальный метод, который должен быть переопределен
//    virtual ~Animal() {} // Деструктор должен быть виртуальным, если он защищен или публичен
//};
//
//// Определение производного класса Dog, наследующегося от Animal
//class Dog : public Animal {
//public:
//    void speak() override { // Переопределение метода speak
//        std::cout << "Woof!" << std::endl;
//    }
//};
//
//// Определение производного класса Cat, наследующегося от Animal
//class Cat : public Animal {
//public:
//    void speak() override { // Переопределение метода speak
//        std::cout << "Meow!" << std::endl;
//    }
//};
//
//int main() {
//    Animal* animals[] = { new Dog(), new Cat() }; // Массив указателей на Animal
//
//    for (auto animalPtr : animals) {
//        animalPtr->speak(); // Вызов метода speak для каждого объекта
//        delete animalPtr; // Освобождение памяти
//    }
//
//    return 0;
//}
//
//
//В этом примере класс Animal является базовым классом, от которого наследуются классы Dog и Cat.Класс Animal определяет абстрактный метод speak(), который должен быть реализован в каждом производном классе.Классы Dog и Cat переопределяют метод speak(), реализуя уникальное поведение для каждого вида животных.
//
//В main() создаются объекты Dog и Cat, и они хранятся в массиве указателей на Animal.Это возможно благодаря полиморфизму в C++, который позволяет объектам разных классов обрабатываться одинаково, если они имеют одинаковый интерфейс.
//В C++ для ввода - вывода данных используются стандартные библиотеки потокового ввода - вывода и формата вывода.
//
//1. * *Библиотека потокового ввода - вывода(iostream) * *:
//-iostream : Базовый заголовочный файл для потокового ввода - вывода.
//- fstream : Для работы с файлами.
//- iostream : Для стандартного ввода и вывода.
//- stringstream : Для работы с потоками строк.
//
//2. * *Библиотека формата вывода(iomanip) * *:
//    -setfill, setw, setprecision, setbase, setiosflags : Для установки формата вывода.
//    - fixed, scientific, hex, dec : Для установки формата числа.
//    - left, right, internal, external : Для установки выравнивания.
//
//    Пример использования :
//
//#include <iostream>
//#include <iomanip>
//
//int main() {
//    double pi = 3.14159;
//    std::cout << "pi = " << std::fixed << std::setprecision(5) << pi << std::endl;
//    return 0;
//}
//
//
//В этом примере мы используем std::fixed для установки фиксированной точности и std::setprecision(5) для установки количества знаков после запятой при выводе числа pi.
