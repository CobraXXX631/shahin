#include <iostream>
#include <string>
#include <vector>
#include <sstream>  
using namespace std;

int main() {
    setlocale(LC_ALL, "Ru");
    string line;
    cout << "Введите слова: ";
    getline(cin, line);

    if (line.empty()) {
        cout << "Пусто" << endl;
        return 0;
    }

    vector<string> words;
    istringstream iss(line);
    string word;
    while (iss >> word) {
        words.push_back(word);
    }

    if (words.empty()) {
        cout << "Нету слов" << endl;
        return 0;
    }

    int min_length = words[0].length();
    for (int i = 1; i < words.size(); i++) {
        if (words[i].length() < min_length) {
            min_length = words[i].length();
        }
    }

    int count = 0;
    for (int i = 0; i < words.size(); i++) {
        if (words[i].length() == min_length) {
            count++;
        }
    }

    cout << "Кол-во: " << count << endl;
    return 0;
}
//Создание многофайлового проекта в C++ начинается с создания основного файла(обычно с расширением.cpp), который включает все остальные файлы проекта.Затем создаются отдельные файлы для каждого класса или функции, которые будут использоваться в проекте.Каждый из этих файлов должен иметь расширение.h(для заголовочных файлов) или.cpp(для исполняемых файлов).
//
//Затем эти файлы должны быть включены в основной файл проекта.Заголовочные файлы включаются директивой #include, а исполняемые файлы могут быть включены напрямую или через заголовочные файлы.
//
//Пример структуры многофайлового проекта C++:
//
//1. Создайте основной файл main.cpp, который будет содержать функцию main().
//
//// main.cpp
//#include <iostream>
//
//// Включаем заголовочный файл другого класса или функции
//#include "MyClass.h"
//
//int main() {
//    // Создаем экземпляр класса Myclass
//    MyClass myObject;
//
//    // Вызываем метод класса
//    myObject.myMethod();
//
//    return 0;
//}
//
//
//2. Создайте отдельный файл для класса или функции, который будет использоваться в основном файле.Например, MyClass.h и MyClass.cpp:
//
//// MyClass.h
//#ifndef MYCLASS_H
//#define MYCLASS_H
//
//class MyClass {
//public:
//    void myMethod();
//};
//
//#endif // MYCLASS_H
//
//
//// MyClass.cpp
//#include "MyClass.h"
//
//void MyClass::myMethod() {
//    // Реализация метода
//    std::cout << "Method called!" << std::endl;
//}
//
//
//3. Убедитесь, что все файлы собраны вместе в одном месте, чтобы компилятор мог найти все необходимые файлы.
//
//4. Компилируйте и запускайте проект, используя командную строку или интегрированную среду разработки(IDE), такую как Visual Studio, CLion, Eclipse CDT и т.д.
//
//Важно помнить, что в C++ существует правило одного определения(One Definition Rule), согласно которому каждый класс, функция или переменная должны быть определены ровно один раз в программе.Это означает, что заголовочные файлы должны только объявлять классы и функции, а реализация должна находиться в соответствующих исполняемых файлах.
//
//--------------------------------------------------------------------------------------------
//Цикл do...while в C++ - это разновидность цикла, который выполняется определенное количество раз, пока условие истинно.Отличие от цикла while заключается в том, что проверка условия происходит после выполнения тела цикла, а не до него.Таким образом, цикл do...while гарантирует выполнение тела цикла хотя бы один раз.
//
//Вот пример использования цикла do...while в C++:
//
//#include <iostream>
//
//int main() {
//    int num;
//    std::cout << "Введите число: ";
//    std::cin >> num;
//
//    do {
//        // Тело цикла
//        std::cout << "Вы ввели число: " << num << std::endl;
//        std::cout << "Хотите ввести еще одно число? (y/n): ";
//        char answer;
//        std::cin >> answer;
//        num = (answer == 'y') ? -1 : num; // Если ответ 'y', устанавливаем num=-1 для выхода из цикла
//    } while (num != -1); // Пока num не равно -1, цикл продолжается
//
//    return 0;
//}
//
//
//В этом примере программа запрашивает у пользователя ввод числа и продолжает запрашивать ввод чисел до тех пор, пока пользователь не введет 'y' для ответа 'нет' или не введет любое другое значение, кроме 'y'.Как только пользователь вводит 'y', программа устанавливает переменную num равной - 1, и цикл прекращается.
