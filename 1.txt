#include <iostream>
#include <vector>

using namespace std;

double find_max(const vector<double>& arr) {
    double max = arr[0];
    for (int i = 1; i < arr.size(); i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}

double find_average_before_max(const vector<double>& arr) {
    double max = find_max(arr);
    double sum = 0;
    int count = 0;
    for (int i = 0; i < arr.size(); i++) {
        if (arr[i] < max) {
            sum += arr[i];
            count++;
        }
    }
    return sum / count;
}

int main() {
    setlocale(LC_ALL, "RU");
    int num_elements;
    cout << "Введите число массивов: ";
    cin >> num_elements;

    vector<double> arr(num_elements);

    cout << "Введите элементы массива через пробел: ";
    for (int i = 0; i < num_elements; i++) {
        cin >> arr[i];
    }

    cout << "Max: " << find_max(arr) << endl;
    cout << "Среднее значение до Max: " << find_average_before_max(arr) << endl;

    return 0;
}
//** Классы в C++ * *
//Классы - это механизм, который позволяет создавать собственные типы данных, объединяющие данные и методы(функции) для работы с ними.Классы используются для инкапсуляции данных и поведения, что делает код более организованным и управляемым.
//** Структура класса**
//Класс состоит из двух основных компонентов :
//***Члены данных : **Переменные, которые хранят данные класса.
//*** Методы : **Функции, которые выполняют операции с данными класса.
//Структура класса объявляется с помощью ключевого слова `class` следующим образом :
//```cpp
//class ClassName {
//public:
//    // Члены данных и методы с доступом public
//private:
//    // Члены данных и методы с доступом private
//protected:
//    // Члены данных и методы с доступом protected
//};
//```
//** Доступ к членам класса**
//Доступ к членам класса осуществляется через объекты класса.Объект - это экземпляр класса, который хранит собственные данные и имеет доступ к методам класса.
//Чтобы создать объект класса, используется оператор `new`:
//```cpp
//ClassName* object = new ClassName();
//```
//Для доступа к членам класса объекта используется оператор `- > `:
//```cpp
//object->member_data;
//object->method();
//```
//** Уровни доступа**
//Классы поддерживают три уровня доступа к членам :
//***public:**Члены класса доступны из любого места в программе.
//*** private:**Члены класса доступны только внутри самого класса.
//*** protected:**Члены класса доступны внутри самого класса, а также в производных классах.
//    ** Конструкторы и деструкторы**
//    *** Конструкторы : **Специальные методы, которые вызываются при создании объекта класса.Используются для инициализации данных класса.
//    *** Деструкторы : **Специальные методы, которые вызываются при удалении объекта класса.Используются для освобождения ресурсов, занятых объектом.
//    ** Наследование**
//    Классы могут наследоваться от других классов, наследуя их данные и методы.Это позволяет создавать новые классы с дополнительными возможностями.
//    ** Пример**
//    Рассмотрим класс `Point`, который представляет точку на плоскости :
//         ```cpp
//             class Point {
//             public:
//                 int x;
//                 int y;
//                 Point(int x, int y) {
//                     this->x = x;
//                     this->y = y;
//                 }
//                 int distance_from_origin() {
//                     return sqrt(pow(x, 2) + pow(y, 2));
//                 }
//         };
//         ```
//             Этот класс имеет два члена данных(`x` и `y`) и два метода(`Point` - конструктор, который инициализирует данные при создании объекта, и `distance_from_origin`, который вычисляет расстояние точки от начала координат).
//                 Чтобы создать объект класса `Point` и вызвать его методы, можно написать следующий код :
//         ```cpp
//             Point point(3, 4);
//         int distance = point.distance_from_origin();
//         cout << "Расстояние от начала координат: " << distance << endl;
//         ```
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------
//             ** Переменные в C++ * *
//
//             Переменные используются для хранения данных в программе.Они имеют имя и тип, который определяет, какой тип данных может хранить переменная.
//
//             ** Типы данных**
//
//             C++ поддерживает различные типы данных, такие как :
//
//         ***Целочисленные типы : **`int`, `short`, `long`, `long long`
//             *** Вещественные типы : **`float`, `double`, `long double`
//             *** Логический тип : **`bool`
//             *** Символьный тип : **`char`
//             *** Строковый тип : **`string`
//
//             ** Преобразование типов**
//
//             Иногда требуется преобразовать переменную из одного типа данных в другой.Это можно сделать с помощью следующих операторов :
//
//         ***Явное преобразование : **Используется для явного преобразования переменной одного типа в другой.Выполняется с помощью синтаксиса `(новый_тип) старая_переменная`.
//             *** Неявное преобразование : **Происходит автоматически, когда компилятор может неявно преобразовать значение одного типа в другой.
//
//             ** Пример**
//
//             Рассмотрим следующий код :
//
//         ```cpp
//             int x = 10;
//         double y = 3.14;
//
//         // Явное преобразование целочисленной переменной в вещественную
//         double z = (double)x;
//
//         // Неявное преобразование вещественной переменной в целочисленную
//         int w = y;
//
//         cout << "z: " << z << endl; // Выведет 10.0
//         cout << "w: " << w << endl; // Выведет 3
//         ```